{
	"info": {
		"_postman_id": "bbd0ac76-666e-488c-ae21-59c047119cd2",
		"name": "HW_Postman_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var resp_token = jsonData.token;\r",
							"\r",
							"pm.environment.set(\"token\", resp_token);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "rolixer",
							"type": "text"
						},
						{
							"key": "password",
							"value": "password",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var response = pm.response.json();\r",
							"var request = JSON.parse(request.data);\r",
							"\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\",\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Проверка структуры json в ответе\", () => {\r",
							"    pm.expect(tv4.validate(response, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что параметр start_qa_salary равен salary из request\", () => {\r",
							"    pm.expect(response.start_qa_salary).to.eql(request.salary)\r",
							"});\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_6_months равен salary*2 из request\", () => {\r",
							"    pm.expect(response.qa_salary_after_6_months).to.eql(request.salary*2)\r",
							"});\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_12_months равен salary*2.9 из request\", () => {\r",
							"    pm.expect(response.qa_salary_after_12_months).to.eql(request.salary*2.9)\r",
							"});\r",
							"pm.test(\"Проверить, что параметр u_salary_1_5_year равен salary*4 из request\", () => {\r",
							"    pm.expect(response.person.u_salary_1_5_year).to.eql(request.salary*4)\r",
							"});\r",
							"\r",
							"var salary1_5_year = response.person.u_salary_1_5_year\r",
							"\r",
							"pm.sendRequest({\r",
							"    url : \"http://162.55.220.72:5005/get_test_user\",\r",
							"    method : \"POST\",\r",
							"    body : {\r",
							"        mode: \"formdata\",\r",
							"        formdata: [\r",
							"            {\r",
							"            key: \"salary\", value:{salary1_5_year}\r",
							"        }\r",
							"        ]\r",
							"    }, function (err, res) {\r",
							"    console.log(res);\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.sendRequest({\r",
							"        url: \"http://162.55.220.72:5005/curr_byn\",\r",
							"        method: \"POST\",\r",
							"        body: {\r",
							"            mode: \"formdata\",\r",
							"        formdata: [\r",
							"            \r",
							"                {key: \"auth_token\", value: pm.environment.get(\"token\")},\r",
							"                {key: \"curr_code\", value: 487},\r",
							"            \r",
							"        ]\r",
							"      },function (err, res) {\r",
							"    console.log(\"SMOTRI SYDA\", res, err);\r",
							"    console.log(pm.environment.get(\"token\"));\r",
							"      }\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\" : 23,\r\n    \"salary\" : 500,\r\n    \"name\" : \"Nikita\",\r\n    \"auth_token\" : \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var response = pm.response.json();\r",
							"var request = request.data;\r",
							"var schema = {\r",
							"    \"type\" : \"object\",\r",
							"    \"properties\":{\r",
							"        \"age\":{\r",
							"            \"type\" : \"integer\"\r",
							"        },\r",
							"        \"name\":{\r",
							"            \"type\" : \"string\"\r",
							"        },\r",
							"        \"salary\":{\r",
							"            \"type\" : \"array\",\r",
							"            \"items\":[\r",
							"            {\r",
							"                \"type\" : \"integer\"\r",
							"            },\r",
							"            {\r",
							"                \"type\" : \"string\"\r",
							"            },\r",
							"            {\r",
							"                \"type\" : \"string\"\r",
							"            },\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"}\r",
							"pm.test(\"проверить структуру JSON\", () => {\r",
							"    pm.expect(tv4.validate(response, schema)).to.be.true;\r",
							"});\r",
							"// В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"pm.test(\"test 1\", () => {\r",
							"    pm.expect(+response.salary[0]).to.eql(+request.salary)\r",
							"});\r",
							"pm.test(\"test 2\", () => {\r",
							"    pm.expect(+response.salary[1]).to.eql(+request.salary*2)\r",
							"});\r",
							"pm.test(\"test 3\", () => {\r",
							"    pm.expect(+response.salary[2]).to.eql(+request.salary*3)\r",
							"});\r",
							"pm.test(\"проверить, что 2-й элемент массива salary больше 1-го и 0-го\", () => {\r",
							"    pm.expect(+response.salary[2]).to.above(+response.salary[0],).and.to.above(+response.salary[1])\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "23",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Nikita",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var response = pm.response.json();\r",
							"var request = request.data;\r",
							"var schema = {\r",
							"    \"type\" : \"object\",\r",
							"    \"properties\":{\r",
							"        \"age\":{\r",
							"            \"type\" : \"integer\"\r",
							"        },\r",
							"        \"daily_food\":{\r",
							"            \"type\" : \"number\"\r",
							"        },\r",
							"        \"daily_sleep\":{\r",
							"            \"type\" : \"number\"\r",
							"        },\r",
							"        \"name\": {\r",
							"      \"type\": \"string\"\r",
							"        }\r",
							"\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test(\"schema is valid\", () => {\r",
							"    pm.expect(tv4.validate(response, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"pm.test(\"daily_sleep\", () => {\r",
							"    pm.expect(response.daily_sleep).to.eql(request.weight*2.5)\r",
							"});\r",
							"pm.test(\"daily_food\", () => {\r",
							"    pm.expect(response.daily_food).to.eql(request.weight*0.012)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "23",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "71",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Nikita",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var response = pm.response.json();\r",
							"var request = request.data;\r",
							"var schema = {\r",
							"    \"type\" : \"object\",\r",
							"    \"properties\":{\r",
							"        \"age\":{\r",
							"            \"type\" : \"string\"\r",
							"        },\r",
							"        \"family\":{\r",
							"            \"type\" : \"object\",\r",
							"            \"properties\":{\r",
							"                \"children\":{\r",
							"                    \"type\" : \"array\",\r",
							"                    \"items\":[\r",
							"                        {\r",
							"                            \"type\" : \"array\",\r",
							"                            \"items\":[\r",
							"                                {\r",
							"                                    \"type\" : \"string\"\r",
							"                                },\r",
							"                                {\r",
							"                                    \"type\" : \"integer\"\r",
							"                                },\r",
							"                            ]\r",
							"                        },\r",
							"                        {\r",
							"                            \"type\" : \"array\",\r",
							"                            \"items\":[\r",
							"                                {\r",
							"                                    \"type\" : \"string\"\r",
							"                                },\r",
							"                                {\r",
							"                                    \"type\" : \"integer\"\r",
							"                                }\r",
							"                            ]\r",
							"                        }\r",
							"                    \r",
							"                    ],\r",
							"                },\r",
							"                \"u_salary_1_5_year\":{\r",
							"                        \"type\" : \"integer\"\r",
							"                    },\r",
							"            }\r",
							"        },\r",
							"        \"name\":{\r",
							"            \"type\" : \"string\"\r",
							"        },\r",
							"        \"salary\":{\r",
							"            \"type\" : \"integer\"\r",
							"        }\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test(\"schema is valid\", () => {\r",
							"    pm.expect(tv4.validate(response, schema)).to.be.true\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить что занчение поля name = значению переменной name из окружения\", () => {\r",
							"    pm.expect(response.name).to.eql(pm.environment.get(\"name\"))\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\", () => {\r",
							"    pm.expect(response.age).to.eql(request.age)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "23",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Nikita",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = pm.response.json();\r",
							"\r",
							"var random = Math.floor(Math.random() * response.length);\r",
							"var randomid = response[random].Cur_ID\r",
							"pm.environment.set(\"random\", randomid);\r",
							"console.log(random)\r",
							"console.log(randomid)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var response = pm.response.json();\r",
							"var schema = {\r",
							"    \"type\" : \"object\",\r",
							"    \"properties\":{\r",
							"        \"Cur_Abbreviation\":{\r",
							"            \"type\" : \"string\"\r",
							"        },\r",
							"        \"Cur_ID\":{\r",
							"            \"type\" : \"integer\"\r",
							"        },\r",
							"        \"Cur_Name\":{\r",
							"            \"type\" : \"string\"\r",
							"        },\r",
							"        \"Cur_OfficialRate\":{\r",
							"            \"type\" : \"number\"\r",
							"        },\r",
							"        \"Cur_Scale\":{\r",
							"            \"type\" : \"integer\"\r",
							"        },\r",
							"        \"Date\":{\r",
							"            \"type\" : \"string\"\r",
							"        },\r",
							"\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test(\"schema is valid\", () => {\r",
							"    pm.expect(tv4.validate(response, schema)).to.be.true\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{random}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}