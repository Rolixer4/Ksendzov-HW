{
	"info": {
		"_postman_id": "d4d15277-85dd-4a61-9722-3c72166aa34c",
		"name": "HW5",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"var response = pm.response.json();\r",
							"\r",
							"pm.test(\"name = Nikita\", () =>{\r",
							"    pm.expect(response.name).to.eql(\"Nikita\");\r",
							"});\r",
							"\r",
							"pm.test(\"age = 23\", () => {\r",
							"    pm.expect(response.age).to.eql(\"23\")\r",
							"});\r",
							"\r",
							"pm.test(\"salary = 500\", () => {\r",
							"    pm.expect(response.salary).to.eql(500)\r",
							"});\r",
							"\r",
							"var request = request.data;\r",
							"\r",
							"pm.test(\"name = name\", () => {\r",
							"    pm.expect(response.name).to.eql(request.name)\r",
							"});\r",
							"\r",
							"pm.test(\"age = age\", () => {\r",
							"    pm.expect(response.age).to.eql(request.age)\r",
							"});\r",
							"\r",
							"pm.test(\"salary = salary\", () => {\r",
							"    pm.expect(response.salary).to.eql(+request.salary)\r",
							"});\r",
							"\r",
							"console.log(response.family);\r",
							"\r",
							"pm.test(\"salary after 1.5 = salary*4\", () => {\r",
							"    pm.expect(response.family.u_salary_1_5_year).to.eql(+request.salary*4)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Nikita",
							"type": "text"
						},
						{
							"key": "age",
							"value": "23",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",() => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var response = pm.response.json();\r",
							"var request = pm.request.url.query.toObject();\r",
							"\r",
							"pm.test(\"name = name\", () => {\r",
							"    pm.expect(response.name).to.eql(request.name)\r",
							"});\r",
							"\r",
							"pm.test(\"age = age\", () => {\r",
							"    pm.expect(response.age).to.eql(request.age)\r",
							"});\r",
							"\r",
							"pm.test(\"salary = salary\", () => {\r",
							"    pm.expect(response.salary).to.eql(+request.salary)\r",
							"});\r",
							"\r",
							"console.log(response.family);\r",
							"\r",
							"pm.test(\"dog have a name\", () => {\r",
							"    pm.expect(response.family.pets.dog).to.have.property(\"name\")\r",
							"});\r",
							"\r",
							"pm.test(\"dog have a age\", () => {\r",
							"    pm.expect(response.family.pets.dog).to.have.property(\"age\")\r",
							"});\r",
							"\r",
							"pm.test(\"dog's name is Luky\", () => {\r",
							"    pm.expect(response.family.pets.dog.name).to.eql(\"Luky\")\r",
							"});\r",
							"\r",
							"pm.test(\"dog's age is 4\", () => {\r",
							"    pm.expect(response.family.pets.dog.age).to.eql(4)\r",
							"});\r",
							"\r",
							"console.log(response.family.pets.dog);\r",
							"console.log(request);\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Nikita&age=23&salary=500",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Nikita"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var response = pm.response.json();\r",
							"var request = pm.request.url.query.toObject();\r",
							"\r",
							"pm.test(\"name = name\", () => {\r",
							"    pm.expect(response.name).to.eql(request.name)\r",
							"});\r",
							"\r",
							"pm.test(\"age = age\", () => {\r",
							"    pm.expect(response.age).to.eql(+request.age)\r",
							"});\r",
							"\r",
							"console.log(request.salary);\r",
							"console.log(response.salary);\r",
							"console.log(response.salary[0]);\r",
							"console.log(response.salary[1]);\r",
							"console.log(response.salary[2]);\r",
							"\r",
							"pm.test(\"salary[0] = salary\", () => {\r",
							"    pm.expect(response.salary[0]).to.eql(+request.salary)\r",
							"});\r",
							"\r",
							"pm.test(\"salary[1] = salary*2\", () => {\r",
							"    pm.expect(+response.salary[1]).to.eql(+request.salary*2)\r",
							"});\r",
							"\r",
							"pm.test(\"salary[2] = salary*3\", () => {\r",
							"    pm.expect(+response.salary[2]).to.eql(+request.salary*3)\r",
							"});\r",
							"\r",
							"pm.environment.set(\"name\", request.name);\r",
							"pm.environment.set(\"age\", request.age);\r",
							"pm.environment.set(\"salary\", request.salary);\r",
							"console.log(pm.environment.get(\"salary\"));\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Nikita&age=23&salary=500",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Nikita"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var response = pm.response.json();\r",
							"var request = request.data;\r",
							"\r",
							"pm.test(\"Проверить, что json response имеет параметр start_qa_salary\", () => {\r",
							"    pm.expect(response).to.property(\"start_qa_salary\")\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_6_months\", () => {\r",
							"    pm.expect(response).to.property(\"qa_salary_after_6_months\")\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_12_months\", () => {\r",
							"    pm.expect(response).to.property(\"qa_salary_after_12_months\")\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_1.5_year\", () => {\r",
							"    pm.expect(response).to.property(\"qa_salary_after_1.5_year\")\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_3.5_years\", () => {\r",
							"    pm.expect(response).to.property(\"qa_salary_after_3.5_years\")\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что json response имеет параметр person\", () => {\r",
							"    pm.expect(response).to.property(\"person\")\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что параметр start_qa_salary равен salary из request\", () => {\r",
							"    pm.expect(response.start_qa_salary).to.eql(+request.salary)\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_6_months равен salary*2 из request\", () => {\r",
							"    pm.expect(response.qa_salary_after_6_months).to.eql(+request.salary*2)\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request\", () => {\r",
							"    pm.expect(response.qa_salary_after_12_months).to.eql(+request.salary*2.7)\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request\", () => {\r",
							"    pm.expect(response[\"qa_salary_after_1.5_year\"]).to.eql(+request.salary*3.3)\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request\", () => {\r",
							"    pm.expect(response[\"qa_salary_after_3.5_years\"]).to.eql(+request.salary*3.8)\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что в параметре person, 1-й элемент из u_name равен salary из request\", () => {\r",
							"    pm.expect(response.person.u_name[1]).to.eql(+request.salary)\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что что параметр u_age равен age из request\", () => {\r",
							"    pm.expect(response.person.u_age).to.eql(+request.age)\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что параметр u_salary_5_years равен salary*4.2 из request\", () => {\r",
							"    pm.expect(response.person.u_salary_5_years).to.eql(+request.salary*4.2)\r",
							"})\r",
							"\r",
							"console.log(response);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}